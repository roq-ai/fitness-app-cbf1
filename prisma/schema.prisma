generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model exercise {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String             @db.VarChar(255)
  description      String?            @db.VarChar(255)
  duration         Int?
  calories_burned  Int?
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @db.Timestamp(6)
  workout_exercise workout_exercise[]
}

model shared_workout {
  id                                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workout_id                            String   @db.Uuid
  shared_with                           String   @db.Uuid
  shared_by                             String   @db.Uuid
  created_at                            DateTime @default(now()) @db.Timestamp(6)
  updated_at                            DateTime @default(now()) @db.Timestamp(6)
  user_shared_workout_shared_byTouser   user     @relation("shared_workout_shared_byTouser", fields: [shared_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_shared_workout_shared_withTouser user     @relation("shared_workout_shared_withTouser", fields: [shared_with], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workout                               workout  @relation(fields: [workout_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model team {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                                              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                           String           @unique @db.VarChar(255)
  firstName                                       String?          @db.VarChar(255)
  lastName                                        String?          @db.VarChar(255)
  roq_user_id                                     String           @db.VarChar(255)
  tenant_id                                       String           @db.VarChar(255)
  created_at                                      DateTime         @default(now()) @db.Timestamp(6)
  updated_at                                      DateTime         @default(now()) @db.Timestamp(6)
  shared_workout_shared_workout_shared_byTouser   shared_workout[] @relation("shared_workout_shared_byTouser")
  shared_workout_shared_workout_shared_withTouser shared_workout[] @relation("shared_workout_shared_withTouser")
  team                                            team[]
  workout                                         workout[]
}

model workout {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String             @db.VarChar(255)
  description      String?            @db.VarChar(255)
  user_id          String             @db.Uuid
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @db.Timestamp(6)
  shared_workout   shared_workout[]
  user             user               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workout_exercise workout_exercise[]
}

model workout_exercise {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workout_id  String   @db.Uuid
  exercise_id String   @db.Uuid
  reps        Int?
  sets        Int?
  weight      Int?
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  exercise    exercise @relation(fields: [exercise_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workout     workout  @relation(fields: [workout_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
